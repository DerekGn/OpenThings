<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenThings</name>
    </assembly>
    <members>
        <member name="T:OpenThings.AlarmClear">
            <summary>
            The commands for clearing an alarm
            </summary>
        </member>
        <member name="F:OpenThings.AlarmClear.LowBattery">
            <summary>
            The device’s battery is failing and must be replaced soon
            </summary>
        </member>
        <member name="F:OpenThings.AlarmClear.PowerFail">
            <summary>
            A mains-powered device is currently running off its battery backup
            </summary>
        </member>
        <member name="F:OpenThings.AlarmClear.OverTemperature">
            <summary>
            The device is running unexpectedly hot and needs attention
            </summary>
        </member>
        <member name="F:OpenThings.AlarmClear.Tamper">
            <summary>
            The device’s anti-tamper mechanism has been triggered
            </summary>
        </member>
        <member name="T:OpenThings.AlarmSet">
            <summary>
            The commands for setting an alarm
            </summary>
        </member>
        <member name="F:OpenThings.AlarmSet.LowBattery">
            <summary>
            The device’s battery is failing and must be replaced soon
            </summary>
        </member>
        <member name="F:OpenThings.AlarmSet.PowerFail">
            <summary>
            A mains-powered device is currently running off its battery backup
            </summary>
        </member>
        <member name="F:OpenThings.AlarmSet.OverTemperature">
            <summary>
            The device is running unexpectedly hot and needs attention
            </summary>
        </member>
        <member name="F:OpenThings.AlarmSet.Tamper">
            <summary>
            The device’s anti-tamper mechanism has been triggered
            </summary>
        </member>
        <member name="T:OpenThings.BaseMessageRecordData">
            <summary>
            A base message record data type
            </summary>
        </member>
        <member name="M:OpenThings.BaseMessageRecordData.#ctor(OpenThings.RecordType)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.BaseMessageRecordData"/>
            </summary>
            <param name="recordType">The <see cref="P:OpenThings.BaseMessageRecordData.RecordType"/></param>
        </member>
        <member name="P:OpenThings.BaseMessageRecordData.RecordType">
            <summary>
            The record type
            </summary>
        </member>
        <member name="M:OpenThings.BaseMessageRecordData.Encode">
            <summary>
            Encode the <see cref="T:OpenThings.BaseMessageRecordData"/> derived data bytes
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Byte"/></returns>
        </member>
        <member name="M:OpenThings.BaseMessageRecordData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:OpenThings.BaseMessageRecordData.EncodeValue">
            <summary>
            Encode the instance message record data value
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Byte"/> values that encode the message record value</returns>
        </member>
        <member name="T:OpenThings.Crc16Ccitt">
            <summary>
            Computes a 16 bit CCITT CRC
            </summary>
        </member>
        <member name="M:OpenThings.Crc16Ccitt.#ctor(System.UInt16)">
            <summary>
            Create instance of a <see cref="T:OpenThings.Crc16Ccitt"/>
            </summary>
            <param name="initialValue">The initial seed value for the CRC calculation</param>
        </member>
        <member name="M:OpenThings.Crc16Ccitt.ComputeChecksum(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Compute the CRC checksum
            </summary>
            <param name="bytes">The <see cref="T:System.Collections.Generic.List`1"/> of bytes to compute the checksum</param>
            <returns>The computed CCITT 16 checksum</returns>
        </member>
        <member name="M:OpenThings.Crc16Ccitt.ComputeChecksumBytes(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Compute the CRC checksum
            </summary>
            <param name="bytes">The <see cref="T:System.Collections.Generic.List`1"/> of bytes to compute the checksum</param>
            <returns>The computed CCITT 16 checksum</returns>
        </member>
        <member name="T:OpenThings.DefaultCommands">
            <summary>
            The set of default openthings commands
            </summary>
        </member>
        <member name="F:OpenThings.DefaultCommands.IdentifyCommand">
            <summary>
            An Identify command
            </summary>
        </member>
        <member name="F:OpenThings.DefaultCommands.JoinCommand">
            <summary>
            A Join command
            </summary>
        </member>
        <member name="F:OpenThings.DefaultCommands.ReportPeriodCommand">
            <summary>
            Report period command
            </summary>
        </member>
        <member name="T:OpenThings.DefaultParameters">
            <summary>
            The set of default openthings <see cref="T:OpenThings.Parameter"/> 
            </summary>
        </member>
        <member name="M:OpenThings.DefaultParameters.#ctor">
            <summary>
            Instantiate instance of <see cref="T:OpenThings.DefaultParameters"/>
            </summary>
        </member>
        <member name="M:OpenThings.DefaultParameters.Add(OpenThings.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:OpenThings.DefaultParameters.GetParameter(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:OpenThings.Exceptions.OpenThingsException">
            <summary>
            An <see cref="T:System.Exception"/> that is throw if an error occurs processing openthing messages
            </summary>
        </member>
        <member name="M:OpenThings.Exceptions.OpenThingsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenThings.Exceptions.OpenThingsException"/> class
            </summary>
        </member>
        <member name="M:OpenThings.Exceptions.OpenThingsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenThings.Exceptions.OpenThingsException"/> class with a specified error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenThings.Exceptions.OpenThingsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenThings.Exceptions.OpenThingsException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:OpenThings.IOpenThingsDecoder">
            <summary>
            Defines the interface for an OpenThings message decoder
            </summary>
        </member>
        <member name="M:OpenThings.IOpenThingsDecoder.Decode(System.Collections.Generic.IList{System.Byte},System.Collections.Generic.IList{OpenThings.PidMap})">
            <summary>
            Decode an OpenThings message packet
            </summary>
            <param name="payload">An <see cref="T:System.Collections.Generic.IList`1"/> of bytes which is the OpenThings message</param>
            <param name="pidMaps">The set of <see cref="T:OpenThings.PidMap"/> for decoding linear shift encoded messages</param>
            <returns>The decoded <see cref="T:OpenThings.Message"/></returns>
        </member>
        <member name="T:OpenThings.IOpenThingsEncoder">
            <summary>
            Defines the interface for an OpenThings message encoder
            </summary>
        </member>
        <member name="M:OpenThings.IOpenThingsEncoder.Encode(OpenThings.Message)">
            <summary>
            Encode an OpenThings message without linear shift encryption
            </summary>
            <param name="message">The message to encode</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of the encoded message</returns>
        </member>
        <member name="M:OpenThings.IOpenThingsEncoder.Encode(OpenThings.Message,System.Byte,System.UInt16)">
            <summary>
            Encode an OpenThings message with linear shift encryption
            </summary>
            <param name="message">The message to encode</param>
            <param name="encryptionId">The encryption value</param>
            <param name="seed">The random seed value for the encryption</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of the encoded message</returns>
        </member>
        <member name="T:OpenThings.IParameters">
            <summary>
            Defines an interface for an openthings parameter set
            </summary>
        </member>
        <member name="M:OpenThings.IParameters.Add(OpenThings.Parameter)">
            <summary>
            Adds a <see cref="T:OpenThings.Parameter"/> instance to the <see cref="T:OpenThings.IParameters"/>
            </summary>
            <param name="item">The <see cref="T:OpenThings.Parameter"/> instance to add to the <see cref="T:OpenThings.IParameters"/> instance</param>
            <exception cref="T:OpenThings.Exceptions.OpenThingsParameterExistsException">Thrown if a <paramref name="item"/> with same identifier exists</exception>
        </member>
        <member name="M:OpenThings.IParameters.GetParameter(System.Byte)">
            <summary>
            Get a <see cref="T:OpenThings.Parameter"/> instance from the collection by identifier
            </summary>
            <param name="identifier">The identifier of the <see cref="T:OpenThings.Parameter"/></param>
            <returns>The <see cref="T:OpenThings.Parameter"/> instance if found in the list</returns>
        </member>
        <member name="T:OpenThings.Message">
            <summary>
            An OpenThings message
            </summary>
        </member>
        <member name="M:OpenThings.Message.#ctor(OpenThings.MessageHeader)">
            <summary>
            Create an instance of an <see cref="N:OpenThings"/> message
            </summary>
            <param name="messageHeader">The <see cref="T:OpenThings.MessageHeader"/> to add to the <see cref="T:OpenThings.Message"/></param>
        </member>
        <member name="P:OpenThings.Message.Header">
            <summary>
            The <see cref="T:OpenThings.MessageHeader"/>
            </summary>
        </member>
        <member name="P:OpenThings.Message.Records">
            <summary>
            The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:OpenThings.MessageRecord"/>
            </summary>
        </member>
        <member name="M:OpenThings.Message.ToString">
            <summary>
            Convert the <see cref="T:OpenThings.Message"/> to a string representation
            </summary>
            <returns>A string representation of the message</returns>
        </member>
        <member name="T:OpenThings.MessageHeader">
            <summary>
            An OpenThings message header
            </summary>
        </member>
        <member name="M:OpenThings.MessageHeader.#ctor(System.Byte,System.Byte,System.UInt16,System.UInt32)">
            <summary>
            Create an instance of an OpenThings message
            </summary>
            <param name="manufacturerId">The manufacturer Id</param>
            <param name="productId">The product Id</param>
            <param name="pip">The pip value</param>
            <param name="sensorId">The sensor Id</param>
        </member>
        <member name="P:OpenThings.MessageHeader.Length">
            <summary>
            The length in bytes of the OpenThings message payload
            </summary>
        </member>
        <member name="P:OpenThings.MessageHeader.ManufacturerId">
            <summary>
            The Manufacturer Id
            </summary>
        </member>
        <member name="P:OpenThings.MessageHeader.Pip">
            <summary>
            The pip
            </summary>
        </member>
        <member name="P:OpenThings.MessageHeader.ProductId">
            <summary>
            The Product Id
            </summary>
        </member>
        <member name="P:OpenThings.MessageHeader.SensorId">
            <summary>
            The sensor Id
            </summary>
        </member>
        <member name="M:OpenThings.MessageHeader.ToString">
            <summary>
            Convert the <see cref="T:OpenThings.MessageHeader"/> to a string representation
            </summary>
            <returns>A string representation of the <see cref="T:OpenThings.MessageHeader"/></returns>
        </member>
        <member name="T:OpenThings.MessageRecord">
            <summary>
            An OpenThings message record
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecord.#ctor(OpenThings.Parameter,OpenThings.BaseMessageRecordData)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecord"/>
            </summary>
            <param name="parameter">The <see cref="P:OpenThings.MessageRecord.Parameter"/> instance</param>
            <param name="data">The <see cref="T:OpenThings.BaseMessageRecordData"/> instance for this <see cref="T:OpenThings.MessageRecord"/></param>
        </member>
        <member name="P:OpenThings.MessageRecord.Data">
            <summary>
            The <see cref="T:OpenThings.BaseMessageRecordData"/> instance for this <see cref="T:OpenThings.MessageRecord"/>
            </summary>
        </member>
        <member name="P:OpenThings.MessageRecord.Parameter">
            <summary>
            The <see cref="P:OpenThings.MessageRecord.Parameter"/> instance
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecord.ToString">
            <summary>
            Convert the <see cref="T:OpenThings.MessageRecord"/> to a string representation
            </summary>
            <returns>A string representation of the <see cref="T:OpenThings.MessageRecord"/></returns>
        </member>
        <member name="T:OpenThings.MessageRecordDataFloat">
            <summary>
            A float <see cref="T:OpenThings.BaseMessageRecordData"/> type
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataFloat.#ctor(OpenThings.RecordType,System.Single)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataFloat"/>
            </summary>
            <param name="recordType"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:OpenThings.MessageRecordDataFloat.#ctor(OpenThings.RecordType,System.Collections.Generic.List{System.Byte})">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataFloat"/>
            </summary>
            <param name="recordType">The <see cref="T:OpenThings.RecordType"/></param>
            <param name="bytes">The bytes to decode</param>
        </member>
        <member name="P:OpenThings.MessageRecordDataFloat.Value">
            <summary>
            The value of the <see cref="T:OpenThings.MessageRecordDataFloat"/>
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataFloat.IsFloat(OpenThings.RecordType)">
            <summary>
            Determines if a <see cref="T:OpenThings.RecordType"/> is a float
            </summary>
            <param name="recordType">The record type to check</param>
            <returns>True if the <paramref name="recordType"/> is a float type</returns>
        </member>
        <member name="T:OpenThings.MessageRecordDataInt">
            <summary>
            A signed integer <see cref="T:OpenThings.BaseMessageRecordData"/> type
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataInt.#ctor(System.Int32)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
            <param name="value">The value to encode</param>
        </member>
        <member name="M:OpenThings.MessageRecordDataInt.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
            <param name="bytes">The bytes to decode</param>
        </member>
        <member name="P:OpenThings.MessageRecordDataInt.Value">
            <summary>
            The value of the <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataInt.ToString">
            <summary>
            Convert the <see cref="T:OpenThings.MessageRecordDataString"/> to a string representation
            </summary>
            <returns>A string representation of the <see cref="T:OpenThings.MessageRecordDataString"/></returns>
        </member>
        <member name="M:OpenThings.MessageRecordDataInt.IsInt(OpenThings.RecordType)">
            <summary>
            Determine if a <see cref="T:OpenThings.RecordType"/> is an integer type.
            </summary>
            <param name="recordType">The <see cref="T:OpenThings.RecordType"/> to check</param>
            <returns>True if the <paramref name="recordType"/> is a int type</returns>
        </member>
        <member name="T:OpenThings.MessageRecordDataNull">
            <summary>
            An empty <see cref="T:OpenThings.BaseMessageRecordData"/> type
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataNull.#ctor">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataNull"/>
            </summary>
        </member>
        <member name="T:OpenThings.MessageRecordDataUInt">
            <summary>
            An unsigned integer <see cref="T:OpenThings.BaseMessageRecordData"/> type
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataUInt.#ctor(System.UInt32)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
            <param name="value">The value to encode</param>
        </member>
        <member name="M:OpenThings.MessageRecordDataUInt.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataUInt"/>
            </summary>
            <param name="bytes">The bytes to decode</param>
        </member>
        <member name="P:OpenThings.MessageRecordDataUInt.Value">
            <summary>
            The value of the <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataUInt.ToString">
            <summary>
            Convert the <see cref="T:OpenThings.MessageRecordDataUInt"/> to a string representation
            </summary>
            <returns>A string representation of the <see cref="T:OpenThings.MessageRecordDataUInt"/></returns>
        </member>
        <member name="M:OpenThings.MessageRecordDataUInt.IsUInt(OpenThings.RecordType)">
            <summary>
            Determine if a <see cref="T:OpenThings.RecordType"/> is an unsigned integer type.
            </summary>
            <param name="recordType">The <see cref="T:OpenThings.RecordType"/> to check</param>
            <returns>True if the <paramref name="recordType"/> is a uint type</returns>
        </member>
        <member name="T:OpenThings.MessageRecordDataString">
            <summary>
            A string <see cref="T:OpenThings.BaseMessageRecordData"/> type
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataString.#ctor(System.String)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
            <param name="value">The value to encode</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <paramref name="value"/> is out of range</exception>
        </member>
        <member name="M:OpenThings.MessageRecordDataString.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Create an instance of a <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
            <param name="bytes">The bytes to decode</param>
        </member>
        <member name="P:OpenThings.MessageRecordDataString.Value">
            <summary>
            The value of the <see cref="T:OpenThings.MessageRecordDataString"/>
            </summary>
        </member>
        <member name="M:OpenThings.MessageRecordDataString.IsString(OpenThings.RecordType)">
            <summary>
            Determine if a <see cref="T:OpenThings.RecordType"/> is an string type.
            </summary>
            <param name="recordType">The <see cref="T:OpenThings.RecordType"/> to check</param>
            <returns>True if the <paramref name="recordType"/> is a string type</returns>
        </member>
        <member name="T:OpenThings.OpenThingsDecoder">
            <summary>
            An <see cref="T:OpenThings.IOpenThingsDecoder"/> type
            </summary>
        </member>
        <member name="M:OpenThings.OpenThingsDecoder.#ctor(OpenThings.IParameters)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.OpenThingsDecoder"/>
            </summary>
        </member>
        <member name="M:OpenThings.OpenThingsDecoder.Decode(System.Collections.Generic.IList{System.Byte},System.Collections.Generic.IList{OpenThings.PidMap})">
            <summary>
            Decode a <see cref="T:System.Collections.Generic.IList`1"/> of bytes representing the OpenThings message payload
            </summary>
            <param name="payload">The OpenThings payload message bytes</param>
            <param name="pidMaps">A mapping of PID to manufacture Ids to enable linear shift encryption decoding</param>
            <returns>A decode <see cref="T:OpenThings.Message"/></returns>
        </member>
        <member name="T:OpenThings.OpenThingsEncoder">
            <summary>
            An <see cref="T:OpenThings.IOpenThingsEncoder"/> type
            </summary>
        </member>
        <member name="M:OpenThings.OpenThingsEncoder.Encode(OpenThings.Message)">
            <summary>
            Encode an OpenThings <see cref="T:OpenThings.Message"/>
            </summary>
            <param name="message">The <see cref="T:OpenThings.Message"/> message to encode</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of the encoded OpentThings message bytes</returns>
        </member>
        <member name="M:OpenThings.OpenThingsEncoder.Encode(OpenThings.Message,System.Byte,System.UInt16)">
            <summary>
            Encode an OpenThings <see cref="T:OpenThings.Message"/>
            </summary>
            <param name="message">The <see cref="T:OpenThings.Message"/> message to encode</param>
            <param name="encryptionId">The encryption Id</param>
            <param name="seed">The random seed for encrypting the message</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of the encoded OpentThings message bytes</returns>
        </member>
        <member name="T:OpenThings.OpenThingsServiceExtensions">
            <summary>
            Add the OpenThings types to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="M:OpenThings.OpenThingsServiceExtensions.AddOpenThings(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:OpenThings.Parameter">
            <summary>
            An OpenThings parameter
            </summary>
        </member>
        <member name="M:OpenThings.Parameter.#ctor(System.Byte)">
            <summary>
            Initialize a new instance of a <see cref="T:OpenThings.Parameter"/>
            </summary>
            <param name="identifier">The identifier for this parameter</param>
        </member>
        <member name="M:OpenThings.Parameter.#ctor(System.Byte,System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:OpenThings.Parameter"/>
            </summary>
            <param name="identifier">The identifier for this parameter</param>
            <param name="label">The <see cref="T:OpenThings.Parameter"/> label</param>
            <param name="units">The <see cref="T:OpenThings.Parameter"/> units</param>
        </member>
        <member name="P:OpenThings.Parameter.Identifier">
            <summary>
            The <see cref="T:OpenThings.Parameter"/> identifier
            </summary>
        </member>
        <member name="P:OpenThings.Parameter.Label">
            <summary>
            The <see cref="T:OpenThings.Parameter"/>
            </summary>
        </member>
        <member name="P:OpenThings.Parameter.Units">
            <summary>
            The unit for this <see cref="T:OpenThings.Parameter"/>
            </summary>
        </member>
        <member name="M:OpenThings.Parameter.CompareTo(OpenThings.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:OpenThings.Parameter.ToString">
            <summary>
            Convert the <see cref="T:OpenThings.Parameter"/> to a string representation
            </summary>
            <returns>A string representation of the <see cref="T:OpenThings.Parameter"/></returns>
        </member>
        <member name="T:OpenThings.ParameterIdentifiers">
            <summary>
            The OpenThings parameter identifiers
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.AirPressure">
            <summary>
            Air pressure
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Alarm">
            <summary>
            An alarm parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.ApparentPower">
            <summary>
            Apparent power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.BatteryLevel">
            <summary>
            Battery level
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Closures">
            <summary>
            A closure parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.CODetector">
            <summary>
            CO Detector
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Current">
            <summary>
            Current
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Debug">
            <summary>
            A debug parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.DoorBell">
            <summary>
            A door bell parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.DoorSensor">
            <summary>
            Door Sensor
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.EmergencyPanicButton">
            <summary>
            Emergency Panic Button
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Energy">
            <summary>
            Energy parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.FallSensor">
            <summary>
            Fall sensor parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Frequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.GasFlowRate">
            <summary>
            Gas flow rate
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.GasPressure">
            <summary>
            Gas pressure
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.GasVolume">
            <summary>
            Gas volume
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.GlassBreakage">
            <summary>
            A glass break parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Identify">
            <summary>
            Identify parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Illuminance">
            <summary>
            Luminance
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Join">
            <summary>
            Join
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.LightLevel">
            <summary>
            Light level
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.MotionDetector">
            <summary>
            Motion detector
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Occupancy">
            <summary>
            Occupancy
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Phase1Power">
            <summary>
            Phase 1 Power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Phase2Power">
            <summary>
            Phase 2 Power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Phase3Power">
            <summary>
            Phase 3 Power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.PowerFactor">
            <summary>
            Power factor
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Rainfall">
            <summary>
            Rainfall
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.ReactivePower">
            <summary>
            Reactive power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.RealPower">
            <summary>
            Real power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.RelativeHumidity">
            <summary>
            Relative humidity
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.ReportPeriod">
            <summary>
            Report period
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.RFQuality">
            <summary>
            Rf Quality
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.RotationSpeed">
            <summary>
            Rotation speed
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.SmokeDetector">
            <summary>
            Smoke detector
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.SourceSelector">
            <summary>
            Source selection parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.SwitchState">
            <summary>
            Switch state
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.ThreePhaseTotalPower">
            <summary>
            THree phase total power
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.TimeDate">
            <summary>
            Time Date
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Vibration">
            <summary>
            Vibration
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.Voltage">
            <summary>
            Voltage
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.WaterDetector">
            <summary>
            Water detection parameter
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.WaterFlowRate">
            <summary>
            Water flow
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.WaterPressure">
            <summary>
            Water pressure
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.WaterVolume">
            <summary>
            Water volume
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.WindSpeed">
            <summary>
            Wind speed
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.IdentifyCommand">
            <summary>
            An Identify command
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.JoinCommand">
            <summary>
            A Join command
            </summary>
        </member>
        <member name="F:OpenThings.ParameterIdentifiers.ReportPeriodCommand">
            <summary>
            Report period command
            </summary>
        </member>
        <member name="T:OpenThings.PidMap">
            <summary>
            A pip to manufacturer map 
            </summary>
        </member>
        <member name="M:OpenThings.PidMap.#ctor(System.Byte,System.Byte)">
            <summary>
            Create an instance of a <see cref="T:OpenThings.PidMap"/>
            </summary>
            <param name="manufacturerId">The manufacturer Id</param>
            <param name="pid">The PID</param>
        </member>
        <member name="P:OpenThings.PidMap.ManufacturerId">
            <summary>
            The manufacturer Id
            </summary>
        </member>
        <member name="P:OpenThings.PidMap.Pid">
            <summary>
            The pid
            </summary>
        </member>
        <member name="T:OpenThings.RecordType">
            <summary>
            OpenThings record type
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX0">
            <summary>
            x.0 unsigned normal integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX4">
            <summary>
            x.4 unsigned fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX8">
            <summary>
            x.8 unsigned fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX12">
            <summary>
            x.4 unsigned fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX16">
            <summary>
            x.16 unsigned fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX20">
            <summary>
            x.20 unsigned fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.UnsignedX24">
            <summary>
            x.24 unsigned fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.Chars">
            <summary>
            A set of characters record type
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.SignedX0">
            <summary>
            x.0 signed normal integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.SignedX8">
            <summary>
            x.8 signed fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.SignedX16">
            <summary>
            x.16 signed fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.SignedX24">
            <summary>
            x.24 signed fixed point integer
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.Enum">
            <summary>
            Enumeration
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.Reserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.Reserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:OpenThings.RecordType.Float">
            <summary>
            A float record type
            </summary>
        </member>
    </members>
</doc>
